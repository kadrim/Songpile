# This is a basic workflow to help you get started with Actions
name: 'Windows Build'

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        node-version: [16]

    # The type of runner that the job will run on
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: echo "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      env:
        cache-name: cache-node-modules
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Dependencies
      run: npm i

    - name: Check lint
      run: npm run lint
    
    - name: Prepare Cookies
      shell: bash
      run: |
          cat << EOF > cookies.json
          ${{ secrets.YOUTUBE_COOKIES }}
          EOF

    - name: Run headless unit test
      run: npm run test

    - name: Run headless e2e test
      run: npm run e2e

    - name: Build the app
      run: npm run electron:build
